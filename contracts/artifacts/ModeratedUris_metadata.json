{
	"compiler": {
		"version": "0.8.1+commit.df193b15"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "approveMetadatForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "approveMetadatForId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "getAllApprovedIdsForMetadata",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "includeGloballyApproved",
						"type": "bool"
					}
				],
				"name": "getAllApprovedMetadatasForId",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllGloballyApprovedMetadata",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "isMetadataApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "isMetadataApprovedForId",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "makeApprovedUriListsAppendOnly",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "unapproveAllMetadataForId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "unapproveMetadatForId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "metadata_uri",
						"type": "string"
					}
				],
				"name": "unapproveMetadataForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Extension of ERC1155MultiURI that adds support for changing the metadata       associated with a token id, only for ids which correspond to unique NFTs,      and only among an approved list of URIs.      THIS IS NOT AN OPENZEPPELIN CONTRACT. It was created by Conor McKenzie. Useful for scenarios where multiple types of tokens are to be created with metadata stored using a content-addressing naming scheme, such as when stored on IPFS or Arweave, and where the option for holders to be able to  change or upgrade their NFT(s)' metadata (within an approved set of  changes) is desired.   Caution: The following ERC1155 components have not been overwritten to   maintain the integrity of OpenZeppelin's original ERC1155 contracts, but they  should not be used:      function _setURI(string memory)    * function _mint(address, uint256, uint256, bytes memory) Note: _mint(address to, uint256 id, uint256 amount, bytes memory data)  from OpenZeppelin's ERC1155 contract is replaced with:  _mintWithoutURI(address to, uint256 id, uint256 amount, bytes memory data), _mintWithURI(address to, uint256 id, uint256 amount, bytes memory data,       string memory newuri) for minting existing tokens and new tokens, respectively.  These functions both call _mint(address, uint256, uint256, bytes memory) to mint tokens.",
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ERC1155MultiUri_B.sol": "ModeratedUris"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ERC1155MultiURI.sol": {
			"keccak256": "0xee818a962c9642f3bbfcafa57e0b14da65008bcf176ae046f2eaa281262a9be9",
			"license": "MIT",
			"urls": [
				"bzz-raw://3221157950703c04706ae2dc4e27e50ceb92e6ce53cc88014b4f23781dd139b1",
				"dweb:/ipfs/QmRhhZJdhxpAQ1PqHivTUT4ZeNb8sGycXqUZYWMWGEsLUr"
			]
		},
		"contracts/ERC1155MultiURI_A.sol": {
			"keccak256": "0x4d4c07d19f204da0004a1f48b346a7d1d4ac06a3d0587aecb06d39b7992b5598",
			"license": "MIT",
			"urls": [
				"bzz-raw://82f5e6d26fb6f057deca62af84d4c7303530800b17b3f6a6d83f1331bb42babc",
				"dweb:/ipfs/QmX2HVZN8nCUUWiZVkJBQdv39RioUcR7pMUnHJA1VYKm5z"
			]
		},
		"contracts/ERC1155MultiUri_B.sol": {
			"keccak256": "0x458e8b6c4b42d1f78c847fc6b965d054bffec2330b9dcc6636d1d1411b3a7c54",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab9fd74de3eb6571ac8f0ed9b6b0e936764d23df267aebba7b3912639e948b7f",
				"dweb:/ipfs/QmTPqf5auaMvCsGAxpKwWpcrgcTtBV2RLNoXS1h7MAXPKD"
			]
		}
	},
	"version": 1
}