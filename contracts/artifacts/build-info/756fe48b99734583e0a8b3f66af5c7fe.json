{
	"id": "756fe48b99734583e0a8b3f66af5c7fe",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.1",
	"solcLongVersion": "0.8.1+commit.df193b15",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Founding Settlers list.sol": {
				"content": "//SPDX-License-Identifier: MIT\r\n\r\n/* RELEASE NOTES:\r\n    This contract is is only to be used for the initial Metanoia Settler's NFT mint\r\n     - it is a cheaper and simpler alternative to using Chainlink. This is fine \r\n     for the initial Metanoia Settler's NFT mint since that contract is a\r\n     one-time use contract.   \r\n\r\n    This contract is a data-only file.\r\n*/\r\n\r\npragma solidity 0.8.1;\r\n\r\ncontract FoundingSettlersList {\r\n\r\n    struct AddressList {\r\n        uint length;\r\n        mapping(uint => address) list;\r\n    }\r\n    \r\n    AddressList addresses;\r\n\r\n    function _initList() internal {\r\n        addresses.list[1] = 0xc0ffee254729296a45a3885639AC7E10F9d54979;\r\n        addresses.list[2] = 0x59eeD72447F2B0418b0fe44C0FCdf15AAFfa1f77;\r\n    }\r\n    \r\n    // This variable will be populated using a script that converts a list into the\r\n    // proper format\r\n\r\n    // Format:\r\n    // addresses[/*INSERT ADDRESS 1 HERE*/] = 1;\r\n    // addresses[/*INSERT ADDRESS 2 HERE*/] = 1;\r\n    // ...\r\n    // addresses[/*INSERT ADDRESS ... HERE*/] = 1;\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Founding Settlers list.sol": {
				"FoundingSettlersList": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Founding Settlers list.sol\":401:1053  contract FoundingSettlersList {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Founding Settlers list.sol\":401:1053  contract FoundingSettlersList {\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ea8ab86a3670f72e8fcd0d2c9d01a392c33bbf1085208bf89b0abb9a1b1f9c0864736f6c63430008010033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ea8ab86a3670f72e8fcd0d2c9d01a392c33bbf1085208bf89b0abb9a1b1f9c0864736f6c63430008010033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA DUP11 0xB8 PUSH11 0x3670F72E8FCD0D2C9D01A3 SWAP3 0xC3 EXTCODESIZE 0xBF LT DUP6 KECCAK256 DUP12 0xF8 SWAP12 EXP 0xBB SWAP11 SHL 0x1F SWAP13 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD ADD STOP CALLER ",
							"sourceMap": "401:652:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea2646970667358221220ea8ab86a3670f72e8fcd0d2c9d01a392c33bbf1085208bf89b0abb9a1b1f9c0864736f6c63430008010033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA DUP11 0xB8 PUSH11 0x3670F72E8FCD0D2C9D01A3 SWAP3 0xC3 EXTCODESIZE 0xBF LT DUP6 KECCAK256 DUP12 0xF8 SWAP12 EXP 0xBB SWAP11 SHL 0x1F SWAP13 ADDMOD PUSH5 0x736F6C6343 STOP ADDMOD ADD STOP CALLER ",
							"sourceMap": "401:652:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							},
							"internal": {
								"_initList()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 401,
									"end": 1053,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ea8ab86a3670f72e8fcd0d2c9d01a392c33bbf1085208bf89b0abb9a1b1f9c0864736f6c63430008010033",
									".code": [
										{
											"begin": 401,
											"end": 1053,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 401,
											"end": 1053,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 401,
											"end": 1053,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 401,
											"end": 1053,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 401,
											"end": 1053,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 401,
											"end": 1053,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Founding Settlers list.sol\":\"FoundingSettlersList\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Founding Settlers list.sol\":{\"keccak256\":\"0x42b3be2e1912d40df2718ffa4575f61d3fb964374ad7fc108081885ac3e1ded4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8691dd11f154cd6380909d2b2354086fd7dc775eca0f09399de1076652becc8b\",\"dweb:/ipfs/QmPD2F21XEs6GHYwv6GxvYJJ2hCZNGSng8na8exweDwA5e\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Founding Settlers list.sol": {
				"ast": {
					"absolutePath": "contracts/Founding Settlers list.sol",
					"exportedSymbols": {
						"FoundingSettlersList": [
							32
						]
					},
					"id": 33,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "375:22:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 32,
							"linearizedBaseContracts": [
								32
							],
							"name": "FoundingSettlersList",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "FoundingSettlersList.AddressList",
									"id": 8,
									"members": [
										{
											"constant": false,
											"id": 3,
											"mutability": "mutable",
											"name": "length",
											"nodeType": "VariableDeclaration",
											"scope": 8,
											"src": "470:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "470:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 7,
											"mutability": "mutable",
											"name": "list",
											"nodeType": "VariableDeclaration",
											"scope": 8,
											"src": "492:29:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
												"typeString": "mapping(uint256 => address)"
											},
											"typeName": {
												"id": 6,
												"keyType": {
													"id": 4,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "500:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "492:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
													"typeString": "mapping(uint256 => address)"
												},
												"valueType": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "508:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressList",
									"nodeType": "StructDefinition",
									"scope": 32,
									"src": "440:89:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "addresses",
									"nodeType": "VariableDeclaration",
									"scope": 32,
									"src": "541:21:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressList_$8_storage",
										"typeString": "struct FoundingSettlersList.AddressList"
									},
									"typeName": {
										"id": 10,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 9,
											"name": "AddressList",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 8,
											"src": "541:11:0"
										},
										"referencedDeclaration": 8,
										"src": "541:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressList_$8_storage_ptr",
											"typeString": "struct FoundingSettlersList.AddressList"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "601:154:0",
										"statements": [
											{
												"expression": {
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 14,
																"name": "addresses",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "612:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressList_$8_storage",
																	"typeString": "struct FoundingSettlersList.AddressList storage ref"
																}
															},
															"id": 17,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "list",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 7,
															"src": "612:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 18,
														"indexExpression": {
															"hexValue": "31",
															"id": 16,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "627:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "612:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "307863306666656532353437323932393661343561333838353633394143374531304639643534393739",
														"id": 19,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "632:42:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"value": "0xc0ffee254729296a45a3885639AC7E10F9d54979"
													},
													"src": "612:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "612:62:0"
											},
											{
												"expression": {
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 22,
																"name": "addresses",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "685:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressList_$8_storage",
																	"typeString": "struct FoundingSettlersList.AddressList storage ref"
																}
															},
															"id": 25,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "list",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 7,
															"src": "685:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 26,
														"indexExpression": {
															"hexValue": "32",
															"id": 24,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "700:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "685:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "307835396565443732343437463242303431386230666534344330464364663135414146666131663737",
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "705:42:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"value": "0x59eeD72447F2B0418b0fe44C0FCdf15AAFfa1f77"
													},
													"src": "685:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "685:62:0"
											}
										]
									},
									"id": 31,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initList",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "589:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "601:0:0"
									},
									"scope": 32,
									"src": "571:184:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 33,
							"src": "401:652:0"
						}
					],
					"src": "375:678:0"
				},
				"id": 0
			}
		}
	}
}